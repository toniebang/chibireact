"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from decouple import config, Csv # Importamos config y Csv para listas/tuplas

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

AUTH_USER_MODEL = 'veluxapp.CustomUser'

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('DJANGO_SECRET_KEY', default='a-very-insecure-fallback-key-for-dev')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG (BOOLEAN): force_type=bool para convertir "True"/"False" a booleanos
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='127.0.0.1', cast=Csv())

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication', # Puedes mantenerla para el admin
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated', # Predeterminado a autenticado
    ),
}

GOOGLE_CLIENT_ID = config('GOOGLE_CLIENT_ID')
GOOGLE_CLIENT_SECRET = config('GOOGLE_CLIENT_SECRET')
# Opcional: Configuración de JWT
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60), # Tiempo de vida del token de acceso
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),   # Tiempo de vida del token de refresco
    # ... otras configuraciones si las necesitas
}

# Application definition

INSTALLED_APPS = [
    'corsheaders',
     'ckeditor',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_filters',
    'veluxapp',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'storages',
]



AWS_ACCESS_KEY_ID = config('DO_SPACES_KEY')
AWS_SECRET_ACCESS_KEY = config('DO_SPACES_SECRET')
AWS_S3_ENDPOINT_URL = f'https://{config("DO_SPACES_REGION")}.digitaloceanspaces.com' # Endpoint de tu región
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400', # Opcional: Control de caché para navegadores
}
AWS_S3_FILE_OVERWRITE = False # No sobrescribir archivos con el mismo nombre

# Si habilitaste CDN, la URL base será la del CDN.
# Si tu CDN Edge Endpoint es https://yourspace.yourregion.cdn.digitaloceanspaces.com
# Entonces tu URL base para media será algo como:
# https://chibiapp-media.nyc3.cdn.digitaloceanspaces.com/
# Puedes ponerla directamente o construirla
AWS_S3_CUSTOM_DOMAIN = f'{config("DO_SPACES_NAME")}.{config("DO_SPACES_REGION")}.cdn.digitaloceanspaces.com' # Si habilitaste CDN
# O si no usas CDN, será solo el endpoint
# AWS_S3_CUSTOM_DOMAIN = None # Deja esto si no usas CDN y quieres usar el endpoint normal


# --- **Configuración de almacenamiento condicional** ---
if not config('DEBUG', default=False, cast=bool):
    # En producción (DEBUG=False), usa DigitalOcean Spaces
    DEFAULT_FILE_STORAGE = 'backend.storages_backends.MediaStorage'
    AWS_LOCATION = config('AWS_LOCATION', default='media')
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
    print("INFO: Usando DigitalOcean Spaces para archivos media en producción.")
else:
    # En desarrollo (DEBUG=True), usa el almacenamiento de archivos local por defecto
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    print("INFO: Usando almacenamiento local para archivos media en desarrollo.")
 
    
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173", # Dominio/puerto de tu frontend React en desarrollo
    "http://127.0.0.1:5173",
    "http://192.168.0.110:5173"
    # "https://tu-dominio-frontend.com", # Tu dominio de producción
]

CORS_ALLOW_CREDENTIALS = True # Necesario para credenciales (cookies, JWT, etc.)
CORS_EXPOSE_HEADERS = [
    'X-Session-Key', # Añade esta cabecera aquí. Asegúrate de la capitalización ('X-Session-Key')
    # También puedes añadir otras cabeceras estándar si no están ya expuestas
    # 'Content-Type',
    # 'ETag',
    # 'Last-Modified',
    # 'Cache-Control',
]
CORS_ALLOW_HEADERS = [
    # ... las que ya tuvieras (accept, authorization, content-type, etc.) ...
    'x-session-key',
    'content-type',# Asegúrate de que esté aquí, a menudo en minúsculas para este setting.
]
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS', # Aunque no lo veas, es importante que esté permitido para el preflight
    'POST',
    'PUT',
    'PATCH',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware', # Middleware para CORS
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if config('DEBUG', default=False, cast=bool):
    # --- Configuración para Desarrollo (DEBUG=True) ---
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3', # Aquí se creará tu archivo de base de datos SQLite
        }
    }
    print("INFO: Usando base de datos SQLite para desarrollo.")
else:
    # --- Configuración para Producción (DEBUG=False) ---
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('DB_NAME'),
            'USER': config('DB_USER'),
            'PASSWORD': config('DB_PASSWORD'),
            'HOST': config('DB_HOST'),
            'PORT': config('DB_PORT', default=25060, cast=int),
            'OPTIONS': {
                'sslmode': 'require', # Necesario para DigitalOcean
            },
        }
    }
    print("INFO: Usando base de datos de DigitalOcean para producción.")

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Configuración para archivos estáticos (CSS, JS, etc.)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # O donde quieras que se recojan los estáticos

# Configuración para archivos media (imágenes subidas por usuarios)
# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Donde se guardarán las imágenes
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated', # Permiso por defecto: solo autenticados.
                                                    # Lo sobrescribirás en vistas específicas como los ViewSets.
    ),
    'DEFAULT_PAGINATION_CLASS': 'veluxapp.pagination.StandardResultsSetPagination',
    'PAGE_SIZE': 16, # Esto es opcional si ya lo defines en la clase de paginación, pero es una buena práctica.

'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter', # Para búsquedas por texto
        'rest_framework.filters.OrderingFilter', # Para ordenar resultados
    ),

}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

